% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fr_field.R
\name{fr_field}
\alias{fr_field}
\title{frictionless \href{https://specs.frictionlessdata.io/table-schema/#field-descriptors}{field}}
\usage{
fr_field(x, name, ...)
}
\arguments{
\item{x}{a character, factor, numeric, integer, logical, or Date vector}

\item{name}{string required name metadata descriptor as a string}

\item{...}{<\code{\link[rlang:dyn-dots]{dynamic-dots}}> other optional metadata descriptors (\code{title}, \code{description}, \code{example})}
}
\value{
a \link[=fr-package]{fr_field} vector
}
\description{
Based on the class input vector \code{x}, the appropriate \verb{fr_*()} function
will be called to create a frictionless field descriptor object (\code{fr_field}).
}
\details{
Only classes listed in this table (and in this order) are used to automatically
select the correct \verb{fr_*()} function:
(To convert a class not specifically listed to a frictionless type or to parse character vectors
for a specific frictionless type, use one of the \verb{fr_*()} functions instead.)

|   \strong{R class}  | \strong{frictionless type} | | \strong{\verb{fr_*()} function}
|:--------------:|:------------:|:-------------:|
|    character, factor*   |    string    | \code{fr_string()} |
|     numeric, integer    |    number    | \code{fr_number()} |
|     logical    |    boolean   | \code{fr_boolean()} |
|      Date      |     date     | \code{fr_date()} |

*Levels of factor columns are also captured in the "enum" item of the "constraints" attribute list.
}
\examples{
fr_field(letters, name = "example_string")
fr_field(factor(LETTERS), name = "example_factor")
fr_field(1:26, name = "example_numbers")
fr_field(c(TRUE, FALSE, TRUE), name = "example_logical")
fr_field(as.Date(c("2013-08-15", "1986-04-29", "1986-06-10")), name = "example_date")

# a more realistic field with accompanying metadata
uid <-
  fr_field(
    replicate(34, paste0(sample(c(letters,0:9), 8, TRUE), collapse = "")),
    name = "uid",
    title = "Unique Identifier",
    description = "Consists of 8 random characters from (a-z) and (0-9)"
)

# examine metadata in `fr_field` objects using base R functions:

# the default print method includes the name and frictionless type,
# but otherwise prints the same as the underlying R type (here, a character vector):
uid

str(uid)

attributes(uid)

# retrieve metadata descriptors with `attr()`:
attr(uid, "title")

# using glue_data makes it easy to write clear documentation and messages using metadata fields:
glue::glue_data(attributes(uid), "`{name}` (a.k.a. '{title}') is a {type} field. {description}.")
}
