% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fr_field.R
\name{fr_field}
\alias{fr_field}
\alias{is_fr_field}
\title{frictionless \href{https://specs.frictionlessdata.io/table-schema/#field-descriptors}{field descriptor}}
\usage{
fr_field(x, name, ...)

is_fr_field(x)
}
\arguments{
\item{x}{\itemize{
\item For \code{fr_field}, a character, factor, numeric, integer, logical, or Date vector
\item For \code{is_fr_field}, an object to test
}}

\item{name}{metadata name descriptor as a string; if NULL, it will be set automatically
using \code{rlang::as_label()}, which is usually nondescript}

\item{...}{<\code{\link[rlang:dyn-dots]{dynamic-dots}}> other user-set optional metadata
descriptors (e.g., \code{title}, \code{description}, \code{example})}
}
\value{
a \link[=fr-package]{fr_field} vector
}
\description{
Automatically create a frictionless field descriptor object (\code{fr_field}) with the appropriate frictionless type, format, and constraints based on the class of the input vector \code{x}.  See details.
}
\details{
Automatic conversion is implemented for the specific \code{R} classes below. To convert a class not specifically listed to a frictionless type
or to parse character vectors for a specific frictionless type,
use one of the \verb{fr_field_*()} functions instead.\tabular{ll}{
   \strong{\code{R} class} \tab \strong{\code{fr} type} \cr
   \code{character()}, \code{factor()} \tab \code{string}* \cr
   \code{numeric()}, \code{integer()} \tab \code{number} \cr
   \code{logical()} \tab \code{boolean} \cr
   \code{Date} \tab \code{date} \cr
}


*If a \code{factor()}, the \code{enum} \code{constraint} is set to the levels of the factor in R.
}
\examples{
fr_field(letters, name = "example_string")

fr_field(factor(LETTERS), name = "example_factor")

fr_field(1:26, name = "example_numbers")

fr_field(c(TRUE, FALSE, TRUE), name = "example_logical")

fr_field(as.Date(c("2013-08-15", "1986-04-29", "1986-06-10")), name = "example_date")

# a more realistic field with metadata
uid <-
  fr_field(
    replicate(34, paste0(sample(c(letters,0:9), 8, TRUE), collapse = "")),
    name = "uid",
    title = "Unique Identifier",
    description = "Consists of 8 random characters from (a-z) and (0-9)"
)

# examine metadata in `fr_field` objects using base R functions:

# the default print method includes the name and frictionless type,
# but otherwise prints the same as the underlying R type (here, a character vector):
uid

str(uid)

attributes(uid)

# retrieve metadata descriptors with `attr()`:
attr(uid, "title")

# using glue_data makes it easy to write clear documentation and messages using metadata fields:
glue::glue_data(attributes(uid), "`{name}` (a.k.a. '{title}') is a {type} field. {description}.")
}
