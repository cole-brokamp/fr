[{"path":"https://cole-brokamp.github.io/fr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 fr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://cole-brokamp.github.io/fr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Cole Brokamp. Author, maintainer.","code":""},{"path":"https://cole-brokamp.github.io/fr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Brokamp C (2023). fr: Implement Frictionless Standards R. https://github.com/cole-brokamp/fr, https://cole-brokamp.github.io/fr/.","code":"@Manual{,   title = {fr: Implement Frictionless Standards in R},   author = {Cole Brokamp},   year = {2023},   note = {https://github.com/cole-brokamp/fr, https://cole-brokamp.github.io/fr/}, }"},{"path":"https://cole-brokamp.github.io/fr/index.html","id":"fr","dir":"","previous_headings":"","what":"Implement Frictionless Standards in R","title":"Implement Frictionless Standards in R","text":"fr package implementing frictionless table schema standards R","code":""},{"path":"https://cole-brokamp.github.io/fr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Implement Frictionless Standards in R","text":"can install development version codec GitHub :","code":"# install.packages(\"pak\") pak::pak(\"geomarker-io/codec\")"},{"path":"https://cole-brokamp.github.io/fr/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Implement Frictionless Standards in R","text":"Use fr_field() create frictionless field object R. R classes table automatically assigned corresponding frictionless type. sense, fr_field() “strict” supports R classes, turn, assume frictionless type, format, constraints already known. contrast, fr_parse_*() parse data coerce vectors classes directly supported fr_field. sense, fr_parse_*() “loose” accept infinitely classes vectors, require fine grained control frictionless type, format, constraints. also come parsing support, available.","code":""},{"path":"https://cole-brokamp.github.io/fr/index.html","id":"parking-lot","dir":"","previous_headings":"Usage","what":"parking lot","title":"Implement Frictionless Standards in R","text":"tabular-data-resource: Required: name, path, profile, schema (set descriptors field) Optional: version, title, homepage, description make markdown/html button tabular-data-resource list version number link download? display html popup link metadata schema??? R function rendered html file metadata?? (Just use json use browser display raw json?) Implement subset tabular data resource functionality. Exclude foregin primary keys, allows removal fields collapsing structure one level schema. Schema basically special type descriptor can many descriptors data field. makes less confusing “fields” terminology used vctrs. Consider schema.","code":""},{"path":"https://cole-brokamp.github.io/fr/index.html","id":"alternatives","dir":"","previous_headings":"Usage","what":"Alternatives","title":"Implement Frictionless Standards in R","text":"R6 object-oriented alternative package: https://github.com/frictionlessdata/tableschema-r; much simpler approach using vctrs","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"fr: Implement Frictionless Standards in R — fr-package","title":"fr: Implement Frictionless Standards in R — fr-package","text":"Classes Frictionless table field schema well tabular-data-resource provided. Tools creating, curating, writing, reading tabular-data-resources also available.","code":""},{"path":[]},{"path":"https://cole-brokamp.github.io/fr/reference/fr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"fr: Implement Frictionless Standards in R — fr-package","text":"Maintainer: Cole Brokamp cole@colebrokamp.com (ORCID)","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_boolean.html","id":null,"dir":"Reference","previous_headings":"","what":"create a frictionless boolean field — fr_boolean","title":"create a frictionless boolean field — fr_boolean","text":"create frictionless boolean field","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_boolean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create a frictionless boolean field — fr_boolean","text":"","code":"fr_boolean(x, name, ..., parse = FALSE)"},{"path":"https://cole-brokamp.github.io/fr/reference/fr_boolean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create a frictionless boolean field — fr_boolean","text":"x vector coercable logical vector name character string name field; read tdr_csv, (.e., names(x)) becomes column name data.frame tibble ... metadata descriptors (title, description) parse parse x .logical instead coercion? requires x character vector","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_boolean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"create a frictionless boolean field — fr_boolean","text":"fr_field vector","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_boolean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"create a frictionless boolean field — fr_boolean","text":"","code":"fr_boolean(c(TRUE, FALSE, TRUE), name = \"case\") #> <fr_field[3]> #> case (fr_boolean) #> [1]  TRUE FALSE  TRUE  # use parse = TRUE to use `as.logical()` to parse character strings for booleans fr_boolean(c(\"true\", \"False\", \"TRUE\", \" \"), name = \"case\", parse = TRUE) #> <fr_field[4]> #> case (fr_boolean) #> [1]  TRUE FALSE  TRUE    NA  # without parse = TRUE, abbreviations will cause an error"},{"path":"https://cole-brokamp.github.io/fr/reference/fr_date.html","id":null,"dir":"Reference","previous_headings":"","what":"create a frictionless date field — fr_date","title":"create a frictionless date field — fr_date","text":"create frictionless date field","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create a frictionless date field — fr_date","text":"","code":"fr_date(x, name, ..., parse = FALSE, format = \"%Y-%m-%d\")"},{"path":"https://cole-brokamp.github.io/fr/reference/fr_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create a frictionless date field — fr_date","text":"x vector coercable Date vector based format (ideally YYYY-MM-DD) name character string name field; read tdr_csv, (.e., names(x)) becomes column name data.frame tibble ... metadata descriptors (see fr_field() possibilities) parse parse x datefixR::fix_date_char instead coercion? requires x character vector assumes month value comes day; e.g., 2/29/2023 format see format argument strptime(); defaults ISO8601","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"create a frictionless date field — fr_date","text":"fr_field vector","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"create a frictionless date field — fr_date","text":"","code":"# normal usage fr_date(c(\"2023-01-01\", \"2023-03-01\", \"2022-11-24\"), name = \"event_date\") #> <fr_field[3]> #> event_date (fr_date) #> [1] 2023-01-01 2023-03-01 2022-11-24  # also takes Dates if already converted fr_date(as.Date(c(\"2023-01-01\", \"2023-03-01\", \"2022-11-24\")), name = \"event_date\") #> <fr_field[3]> #> event_date (fr_date) #> [1] 2023-01-01 2023-03-01 2022-11-24  # can specify format for non-ISO8601 dates fr_date(c(\"2023/01/01\", \"2023/03/01\", \"2022/11/24\"), name = \"event_date\", format = \"%Y/%m/%d\") #> <fr_field[3]> #> event_date (fr_date) #> [1] 2023-01-01 2023-03-01 2022-11-24  # can parse dates in other formats with optionally installed {datefixR} package fr_date(c(\"02/05/23\", \"02/05/21\", \"02/05/18\"), name = \"event_date\", parse = TRUE) #> <fr_field[3]> #> event_date (fr_date) #> [1] 2023-02-05 2021-02-05 2018-02-05  # parsing is useful for year-month combinations too, # as day is always imputed as the first of the month fr_date(c(\"jan 2020\", \"feb 2020\", \"mar 2020\"), name = \"event_date\", parse = TRUE) #> <fr_field[3]> #> event_date (fr_date) #> [1] 2020-01-01 2020-02-01 2020-03-01 fr_date(c(\"2020-01\", \"2020-02\", \"2020-03\"), name = \"event_date\", parse = TRUE) #> <fr_field[3]> #> event_date (fr_date) #> [1] 2020-01-01 2020-02-01 2020-03-01  # parsing with a missing day and month (i.e., just year) will cause an error; # consider using fr_numeric in this case instead"},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field.html","id":null,"dir":"Reference","previous_headings":"","what":"frictionless field — fr_field","title":"frictionless field — fr_field","text":"Based class input vector x, appropriate fr_*() function called create frictionless field descriptor object (fr_field).","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"frictionless field — fr_field","text":"","code":"fr_field(x, name, ...)  fr_string(x, name, ...)"},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"frictionless field — fr_field","text":"x character, factor, numeric, integer, logical, Date vector name string required name metadata descriptor string ... <dynamic-dots> optional metadata descriptors (title, description, example)","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"frictionless field — fr_field","text":"fr_field vector","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"frictionless field — fr_field","text":"classes listed table (order) used automatically select correct fr_*() function. ^Levels factor columns also captured \"enum\" item \"constraints\" attribute list. convert class specifically listed frictionless type parse character vectors specific frictionless type, use one fr_*() functions instead.","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"frictionless field — fr_field","text":"","code":"fr_field(letters, name = \"example_string\") #> <fr_field[26]> #> example_string (fr_string) #>  [1] a b c d e f g h i j k l m n o p q r s t u v w x y z  # TODO fr_field(factor(LETTERS), name = \"example_factor\")  fr_field(1:26, name = \"example_numbers\") #> <fr_field[26]> #> example_numbers (fr_number) #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #> [26] 26  fr_field(c(TRUE, FALSE, TRUE), name = \"example_logical\") #> <fr_field[3]> #> example_logical (fr_boolean) #> [1]  TRUE FALSE  TRUE  fr_field(as.Date(c(\"2013-08-15\", \"1986-04-29\", \"1986-06-10\")), name = \"example_date\") #> <fr_field[3]> #> example_date (fr_date) #> [1] 2013-08-15 1986-04-29 1986-06-10  # a more realistic field with metadata uid <-   fr_field(     replicate(34, paste0(sample(c(letters,0:9), 8, TRUE), collapse = \"\")),     name = \"uid\",     title = \"Unique Identifier\",     description = \"Consists of 8 random characters from (a-z) and (0-9)\" )  # examine metadata in `fr_field` objects using base R functions:  # the default print method includes the name and frictionless type, # but otherwise prints the same as the underlying R type (here, a character vector): uid #> <fr_field[34]> #> uid (fr_string) #>  [1] idl9tt1a qw3uktgm k60errij dtqjl26g 8jviqewr 0e3teeav 577wgbfy 247j8mms #>  [9] 3467s1sx qj3qgzuv rbc8hlqo pge0fkgg 4uiv8nvf lhdjhtmn 42jokfhm krv678g3 #> [17] qpz6w01x sa1rcp4a d2fdegz8 gbhrl5wt kmj0vkdg dlsz8njg d6a6rgth pnqy1t5u #> [25] 5xyxpz23 q7n4rv5a ie8b819b 5gxik24c 26ka2ls6 gdxu1dr9 a73k11m4 zi7pnqgh #> [33] etkd0cao mo7eyppp  str(uid) #> uid (fr_string) #>  fr_field [1:34] idl9tt1a, qw3uktgm, k60errij, dtqjl26g, 8jviqewr, 0e3teeav... #>  @ name       : chr \"uid\" #>  @ title      : chr \"Unique Identifier\" #>  @ description: chr \"Consists of 8 random characters from (a-z) and (0-9)\" #>  @ type       : chr \"string\"  attributes(uid) #> $name #> [1] \"uid\" #>  #> $title #> [1] \"Unique Identifier\" #>  #> $description #> [1] \"Consists of 8 random characters from (a-z) and (0-9)\" #>  #> $type #> [1] \"string\" #>  #> $class #> [1] \"fr_field\"   \"vctrs_vctr\" #>   # retrieve metadata descriptors with `attr()`: attr(uid, \"title\") #> [1] \"Unique Identifier\"  # using glue_data makes it easy to write clear documentation and messages using metadata fields: glue::glue_data(attributes(uid), \"`{name}` (a.k.a. '{title}') is a {type} field. {description}.\") #> `uid` (a.k.a. 'Unique Identifier') is a string field. Consists of 8 random characters from (a-z) and (0-9). fr_string(letters, name = \"letters\") #> <fr_field[26]> #> letters (fr_string) #>  [1] a b c d e f g h i j k l m n o p q r s t u v w x y z fr_string(letters, name = \"letters\", title = \"Letters\") #> <fr_field[26]> #> letters (fr_string) #>  [1] a b c d e f g h i j k l m n o p q r s t u v w x y z"},{"path":"https://cole-brokamp.github.io/fr/reference/fr_number.html","id":null,"dir":"Reference","previous_headings":"","what":"create a frictionless number field — fr_number","title":"create a frictionless number field — fr_number","text":"create frictionless number field","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_number.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create a frictionless number field — fr_number","text":"","code":"fr_number(x, name, ..., parse = FALSE)"},{"path":"https://cole-brokamp.github.io/fr/reference/fr_number.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create a frictionless number field — fr_number","text":"x vector coerceable numeric vector; character vector parse TRUE name character string name field; read tdr_csv, (.e., names(x)) becomes column name data.frame tibble ... metadata descriptors (see fr_field() possibilities) parse parse x readr::parse_number instead coercion? requires x character vector","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_number.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"create a frictionless number field — fr_number","text":"fr_field vector","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_number.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"create a frictionless number field — fr_number","text":"frictionless special values: Nan (number), INF (positive infinity), -INF (negative infinity) represented R NaN, Inf, -Inf use readr::locale() change frictionless decimalChar groupChar frictionless bareNumber property false, equivalent parse = TRUE (vice versa)","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_number.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"create a frictionless number field — fr_number","text":"","code":"fr_number(1:10, name = \"score\") #> <fr_field[10]> #> score (fr_number) #>  [1]  1  2  3  4  5  6  7  8  9 10  fr_number(c(10, 9, -Inf, NA, Inf, NaN), name = \"score\") #> <fr_field[6]> #> score (fr_number) #> [1]   10    9 -Inf   NA  Inf  NaN  # setting parse = TRUE is useful when x contains non-numeric characters: fr_number(c(\"$95,000\", \"$100,000\", \"78000\"), name = \"cost\", parse = TRUE) #> <fr_field[3]> #> cost (fr_number) #> [1]  95000 100000  78000  # parsing replaces non-numeric character values with missing values fr_number(c(\"12%\", \"44%\", \"xx%\"), name = \"fraction_elevated\", parse = TRUE) #> Warning: 1 parsing failure. #> row col expected actual #>   3  -- a number    xx% #> <fr_field[3]> #> fraction_elevated (fr_number) #> [1] 12 44 NA  # caution: combining numerics and characters into one character vector # is unadvised and can lead to problems c(\"$100\", \"$120\", NaN, Inf) #> [1] \"$100\" \"$120\" \"NaN\"  \"Inf\"  fr_number(c(\"$100\", \"$120\", NaN, Inf), name = \"fraction_elevated\", parse = TRUE) #> Warning: 2 parsing failures. #> row col expected actual #>   3  -- a number    NaN #>   4  -- a number    Inf #> <fr_field[4]> #> fraction_elevated (fr_number) #> [1] 100 120  NA  NA"},{"path":"https://cole-brokamp.github.io/fr/reference/tdr.html","id":null,"dir":"Reference","previous_headings":"","what":"tabular-data-resource — tdr","title":"tabular-data-resource — tdr","text":"tabular-data-resource","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/tdr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tabular-data-resource — tdr","text":"","code":"tdr()"},{"path":"https://cole-brokamp.github.io/fr/reference/tdr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"tabular-data-resource — tdr","text":"tibble","code":""}]
