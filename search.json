[{"path":"https://cole-brokamp.github.io/fr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 fr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://cole-brokamp.github.io/fr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Cole Brokamp. Author, maintainer.","code":""},{"path":"https://cole-brokamp.github.io/fr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Brokamp C (2023). fr: Implement Frictionless Standards R. https://github.com/cole-brokamp/fr, https://cole-brokamp.github.io/fr/.","code":"@Manual{,   title = {fr: Implement Frictionless Standards in R},   author = {Cole Brokamp},   year = {2023},   note = {https://github.com/cole-brokamp/fr, https://cole-brokamp.github.io/fr/}, }"},{"path":"https://cole-brokamp.github.io/fr/index.html","id":"fr","dir":"","previous_headings":"","what":"Implement Frictionless Standards in R","title":"Implement Frictionless Standards in R","text":"fr package implementing Frctionless Table Schema Standards R.","code":""},{"path":"https://cole-brokamp.github.io/fr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Implement Frictionless Standards in R","text":"can install development version codec GitHub :","code":"# install.packages(\"pak\") pak::pak(\"geomarker-io/codec\")"},{"path":[]},{"path":"https://cole-brokamp.github.io/fr/index.html","id":"parking-lot","dir":"","previous_headings":"Example Usage","what":"parking lot","title":"Implement Frictionless Standards in R","text":"tabular-data-resource: Required: name, path, profile, schema (set descriptors field) Optional: version, title, homepage, description make markdown/html button tabular-data-resource list version number link download? display html popup link metadata schema??? R function rendered html file metadata?? (Just use json use browser display raw json?) Implement subset tabular data resource functionality. Exclude foregin primary keys, allows removal fields collapsing structure one level schema. Schema basically special type descriptor can many descriptors data field. makes less confusing “fields” terminology used vctrs. Consider schema.","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"fr: Implement Frictionless Standards in R — fr-package","title":"fr: Implement Frictionless Standards in R — fr-package","text":"Classes Frictionless table field schema well tabular-data-resource provided. Tools creating, curating, writing, reading tabular-data-resources also available.","code":""},{"path":[]},{"path":"https://cole-brokamp.github.io/fr/reference/fr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"fr: Implement Frictionless Standards in R — fr-package","text":"Maintainer: Cole Brokamp cole@colebrokamp.com (ORCID)","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_boolean.html","id":null,"dir":"Reference","previous_headings":"","what":"create a frictionless boolean field — fr_boolean","title":"create a frictionless boolean field — fr_boolean","text":"create frictionless boolean field","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_boolean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create a frictionless boolean field — fr_boolean","text":"","code":"fr_boolean(x, name, ..., parse = FALSE)"},{"path":"https://cole-brokamp.github.io/fr/reference/fr_boolean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create a frictionless boolean field — fr_boolean","text":"x vector coercable logical vector name character string name field; read tdr_csv, (.e., names(x)) becomes column name data.frame tibble ... metadata descriptors (title, description) parse parse x .logical instead coercion? requires x character vector","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_boolean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"create a frictionless boolean field — fr_boolean","text":"\"fr_field\" object","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_boolean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"create a frictionless boolean field — fr_boolean","text":"","code":"fr_boolean(c(TRUE, FALSE, TRUE), name = \"case\") #> <fr_field[3]> #> [1]  TRUE FALSE  TRUE # use parse = TRUE to use `as.logical()` to parse character strings for booleans fr_boolean(c(\"true\", \"False\", \"TRUE\", \" \"), name = \"case\", parse = TRUE) #> <fr_field[4]> #> [1]  TRUE FALSE  TRUE    NA # without parse = TRUE, abbreviations will cause an error"},{"path":"https://cole-brokamp.github.io/fr/reference/fr_date.html","id":null,"dir":"Reference","previous_headings":"","what":"create a frictionless date field — fr_date","title":"create a frictionless date field — fr_date","text":"create frictionless date field","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create a frictionless date field — fr_date","text":"","code":"fr_date(x, name, ..., format = \"%Y-%m-%d\", parse = FALSE)"},{"path":"https://cole-brokamp.github.io/fr/reference/fr_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create a frictionless date field — fr_date","text":"x vector coercable Date vector based format (ideally YYYY-MM-DD) name character string name field; read tdr_csv, (.e., names(x)) becomes column name data.frame tibble ... metadata descriptors (title, description) format used strptime(), defaults ISO8601 parse parse x datefixR::fix_date_char instead coercion? requires x character vector","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"create a frictionless date field — fr_date","text":"\"fr_field\" object","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"create a frictionless date field — fr_date","text":"","code":"# normal usage fr_date(c(\"2023-01-01\", \"2023-03-01\", \"2022-11-24\"), name = \"event_date\") #> <fr_field[3]> #> [1] 19358 19417 19320 # also takes Dates if already converted fr_date(as.Date(c(\"2023-01-01\", \"2023-03-01\", \"2022-11-24\")), name = \"event_date\") #> <fr_field[3]> #> [1] 19358 19417 19320 # can specify format for non-ISO8601 dates fr_date(c(\"2023/01/01\", \"2023/03/01\", \"2022/11/24\"), name = \"event_date\", format = \"%Y/%m/%d\") #> <fr_field[3]> #> [1] 19358 19417 19320 # can parse dates in other formats with optionally installed {datefixR} package fr_date(c(\"02/05/23\", \"02/05/21\", \"02/05/18\"), name = \"event_date\", parse = TRUE) #> <fr_field[3]> #> [1] 19479 18749 17653 # parsing is useful for year-month combinations too, # as day is always imputed as the first of the month fr_date(c(\"jan 2020\", \"feb 2020\", \"mar 2020\"), name = \"event_date\", parse = TRUE) #> <fr_field[3]> #> [1] 18262 18293 18322 fr_date(c(\"2020-01\", \"2020-02\", \"2020-03\"), name = \"event_date\", parse = TRUE) #> <fr_field[3]> #> [1] 18262 18293 18322 # parsing with a missing day and month (i.e., just year) will cause an error; # consider using fr_numeric in this case instead"},{"path":"https://cole-brokamp.github.io/fr/reference/fr_number.html","id":null,"dir":"Reference","previous_headings":"","what":"create a frictionless number field — fr_number","title":"create a frictionless number field — fr_number","text":"create frictionless number field","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_number.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create a frictionless number field — fr_number","text":"","code":"fr_number(x, name, ..., parse = FALSE)"},{"path":"https://cole-brokamp.github.io/fr/reference/fr_number.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create a frictionless number field — fr_number","text":"x vector coerceable numeric vector; character vector parse TRUE name character string name field; read tdr_csv, (.e., names(x)) becomes column name data.frame tibble ... metadata descriptors (title, description) parse parse x readr::parse_number instead coercion? requires x character vector","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_number.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"create a frictionless number field — fr_number","text":"\"fr_field\" object","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_number.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"create a frictionless number field — fr_number","text":"frictionless special values: Nan (number), INF (positive infinity), -INF (negative infinity) represented R NaN, Inf, -Inf use readr::locale() change frictionless decimalChar groupChar frictionless bareNumber property false, equivalent parse = TRUE (vice versa)","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_number.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"create a frictionless number field — fr_number","text":"","code":"fr_number(1:10, name = \"score\") #> <fr_field[10]> #>  [1]  1  2  3  4  5  6  7  8  9 10 fr_number(c(10, 9, -Inf, NA, Inf, NaN), name = \"score\") #> <fr_field[6]> #> [1]   10    9 -Inf   NA  Inf  NaN # setting parse = TRUE is useful when x contains non-numeric characters: fr_number(c(\"$95,000\", \"$100,000\", \"78000\"), name = \"cost\", parse = TRUE) #> <fr_field[3]> #> [1]  95000 100000  78000 # parsing replaces non-numeric character values with missing values fr_number(c(\"12%\", \"44%\", \"xx%\"), name = \"fraction_elevated\", parse = TRUE) #> Warning: 1 parsing failure. #> row col expected actual #>   3  -- a number    xx% #> <fr_field[3]> #> [1] 12 44 NA # caution: combining numerics and characters into one character vector # is unadvised and can lead to problems c(\"$100\", \"$120\", NaN, Inf) #> [1] \"$100\" \"$120\" \"NaN\"  \"Inf\"  fr_number(c(\"$100\", \"$120\", NaN, Inf), name = \"fraction_elevated\", parse = TRUE) #> Warning: 2 parsing failures. #> row col expected actual #>   3  -- a number    NaN #>   4  -- a number    Inf #> <fr_field[4]> #> [1] 100 120  NA  NA"},{"path":"https://cole-brokamp.github.io/fr/reference/fr_string.html","id":null,"dir":"Reference","previous_headings":"","what":"create a frictionless string field — fr_string","title":"create a frictionless string field — fr_string","text":"create frictionless string field","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create a frictionless string field — fr_string","text":"","code":"fr_string(x, name, ...)"},{"path":"https://cole-brokamp.github.io/fr/reference/fr_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create a frictionless string field — fr_string","text":"x vector coerceable character vector; x factor, levels stored ??? TODO factor things... name character string name field; read tdr_csv, (.e., names(x)) becomes column name data.frame tibble ... metadata descriptors (title, description)","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_string.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"create a frictionless string field — fr_string","text":"\"fr_field\" object","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_string.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"create a frictionless string field — fr_string","text":"","code":"fr_string(letters, name = \"letters\") #> <fr_field[26]> #>  [1] a b c d e f g h i j k l m n o p q r s t u v w x y z d_letters <- fr_string(letters,                        name = \"letters\",                        title = \"Letters of the Alphabet\",                        description = \"Including from A to Z\") d_letters #> <fr_field[26]> #>  [1] a b c d e f g h i j k l m n o p q r s t u v w x y z str(d_letters) #>  fr_field [1:26] a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t... #>  @ name       : chr \"letters\" #>  @ title      : chr \"Letters of the Alphabet\" #>  @ description: chr \"Including from A to Z\" #>  @ type       : chr \"string\""},{"path":"https://cole-brokamp.github.io/fr/reference/tdr.html","id":null,"dir":"Reference","previous_headings":"","what":"tabular-data-resource — tdr","title":"tabular-data-resource — tdr","text":"tabular-data-resource","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/tdr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tabular-data-resource — tdr","text":"","code":"tdr()"},{"path":"https://cole-brokamp.github.io/fr/reference/tdr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"tabular-data-resource — tdr","text":"tibble","code":""}]
