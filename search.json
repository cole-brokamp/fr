[{"path":"https://cole-brokamp.github.io/fr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 fr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://cole-brokamp.github.io/fr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Cole Brokamp. Author, maintainer.","code":""},{"path":"https://cole-brokamp.github.io/fr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Brokamp C (2023). fr: Implement Frictionless Standards R. https://github.com/cole-brokamp/fr, https://cole-brokamp.github.io/fr/.","code":"@Manual{,   title = {fr: Implement Frictionless Standards in R},   author = {Cole Brokamp},   year = {2023},   note = {https://github.com/cole-brokamp/fr, https://cole-brokamp.github.io/fr/}, }"},{"path":"https://cole-brokamp.github.io/fr/index.html","id":"fr","dir":"","previous_headings":"","what":"Implement Frictionless Standards in R","title":"Implement Frictionless Standards in R","text":"fr package implementing frictionless table schema standards R","code":""},{"path":"https://cole-brokamp.github.io/fr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Implement Frictionless Standards in R","text":"can install development version codec GitHub :","code":"# install.packages(\"pak\") pak::pak(\"geomarker-io/codec\")"},{"path":"https://cole-brokamp.github.io/fr/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Implement Frictionless Standards in R","text":"Use fr_field() create frictionless field object R automatically selecting appropriate Frictionless type, format, constraint metadata descriptors specific set R objects: *factor(), enum constraint set levels factor R. {{{ insert example using fr “curate” dataset R }}} Automatically defining metadata descriptors based class() attributes() object R powerful, strict supports common R classes. Using R curate data disk frictionless tabular data resource utilizes Frictionless defaults wherever possible, minimizing need manual curation metadata already captured using R. contrast, fr_field_string(), fr_field_number(), fr_field_boolean(), fr_field_date() lenient accept infinitely classes vectors (coercion), require fine grained specification frictionless type, format, constraints. also come parsing input character strings specific type; e.g., parsing $11,000 frictionless number (11000) jun-2016 frictionless date (2016-01-06). allows flexibility reading messy, real-world Frictionless tabular data resources using R. {{{ insert example using fr read messy frictionless dataset R }}}","code":""},{"path":"https://cole-brokamp.github.io/fr/index.html","id":"alternatives","dir":"","previous_headings":"Usage","what":"Alternatives","title":"Implement Frictionless Standards in R","text":"R6 object-oriented alternative package: https://github.com/frictionlessdata/tableschema-r; much simpler approach using {vctrs}","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/format.fr_field.html","id":null,"dir":"Reference","previous_headings":"","what":"fr_field(letters, name = ","title":"fr_field(letters, name = ","text":"fr_field(letters, name = \"letters\") fr_field(factor(letters), name = \"letters\")","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/format.fr_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fr_field(letters, name = ","text":"","code":"# S3 method for fr_field format(x, ...)"},{"path":"https://cole-brokamp.github.io/fr/reference/fr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"fr: Implement Frictionless Standards in R — fr-package","title":"fr: Implement Frictionless Standards in R — fr-package","text":"Classes Frictionless table field schema well tabular-data-resource provided. Tools creating, curating, writing, reading tabular-data-resources also available.","code":""},{"path":[]},{"path":"https://cole-brokamp.github.io/fr/reference/fr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"fr: Implement Frictionless Standards in R — fr-package","text":"Maintainer: Cole Brokamp cole@colebrokamp.com (ORCID)","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr-vctrs.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal vctrs methods — fr-vctrs","title":"Internal vctrs methods — fr-vctrs","text":"Internal vctrs methods","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field.html","id":null,"dir":"Reference","previous_headings":"","what":"frictionless field descriptor — fr_field","title":"frictionless field descriptor — fr_field","text":"Automatically create frictionless field descriptor object (fr_field) appropriate frictionless type, format, constraints based class input vector x.  See details.","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"frictionless field descriptor — fr_field","text":"","code":"fr_field(x, name, ...)  is_fr_field(x)"},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"frictionless field descriptor — fr_field","text":"x fr_field, character, factor, numeric, integer, logical, Date vector is_fr_field, object test name metadata name descriptor string; NULL, set automatically using rlang::as_label(), usually nondescript ... <dynamic-dots> user-set optional metadata descriptors (e.g., title, description, example)","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"frictionless field descriptor — fr_field","text":"fr_field vector","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"frictionless field descriptor — fr_field","text":"Automatic conversion implemented specific R classes . convert class specifically listed frictionless type parse character vectors specific frictionless type, use one fr_field_*() functions instead. *factor(), enum constraint set levels factor R.","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"frictionless field descriptor — fr_field","text":"","code":"fr_field(letters, name = \"example_string\") #> <fr_field[26]> #> example_string (fr_string) #>  [1] a b c d e f g h i j k l m n o p q r s t u v w x y z  fr_field(factor(LETTERS), name = \"example_factor\") #> <fr_field[26]> #> example_factor (fr_string)* #>  [1] A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  fr_field(1:26, name = \"example_numbers\") #> <fr_field[26]> #> example_numbers (fr_number) #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #> [26] 26  fr_field(c(TRUE, FALSE, TRUE), name = \"example_logical\") #> <fr_field[3]> #> example_logical (fr_boolean) #> [1]  TRUE FALSE  TRUE  fr_field(as.Date(c(\"2013-08-15\", \"1986-04-29\", \"1986-06-10\")), name = \"example_date\") #> <fr_field[3]> #> example_date (fr_date) #> [1] 2013-08-15 1986-04-29 1986-06-10  # a more realistic field with metadata uid <-   fr_field(     replicate(34, paste0(sample(c(letters,0:9), 8, TRUE), collapse = \"\")),     name = \"uid\",     title = \"Unique Identifier\",     description = \"Consists of 8 random characters from (a-z) and (0-9)\" )  # examine metadata in `fr_field` objects using base R functions:  # the default print method includes the name and frictionless type, # but otherwise prints the same as the underlying R type (here, a character vector): uid #> <fr_field[34]> #> uid (fr_string) #>  [1] arj8kasr ubo99mnb 0zzi9no4 pton9ozc hslop8rv 72iau1t8 27g6auc6 eyecn7pe #>  [9] zcoz87vk atd2uhov 0z50lv97 vfsdpq3e ktyrltwo 6wnqedxh 03ls4p03 0xxobm2n #> [17] ximma3qv nxcn0nvv d4fguxeq cv0gqv3t b6u4osin 0m25tcbw nblgc14c 26milvs7 #> [25] bry703ij bmvhk2xu x5uu7snm 99mm8mp3 wb6w9n8t 3f9g2f40 oukrtvn2 tzd5es79 #> [33] hiajlo7p cy9vet3f  str(uid) #> uid (fr_string) #>  field [1:34] arj8kasr, ubo99mnb, 0zzi9no4, pton9ozc, hslop8rv, 72iau1t8, 2... #>  @ name       : chr \"uid\" #>  @ type       : chr \"string\" #>  @ title      : chr \"Unique Identifier\" #>  @ description: chr \"Consists of 8 random characters from (a-z) and (0-9)\"  attributes(uid) #> $name #> [1] \"uid\" #>  #> $type #> [1] \"string\" #>  #> $title #> [1] \"Unique Identifier\" #>  #> $description #> [1] \"Consists of 8 random characters from (a-z) and (0-9)\" #>  #> $class #> [1] \"fr_field\"   \"vctrs_vctr\" #>   # retrieve metadata descriptors with `attr()`: attr(uid, \"title\") #> [1] \"Unique Identifier\"  # using glue_data makes it easy to write clear documentation and messages using metadata fields: glue::glue_data(attributes(uid), \"`{name}` (a.k.a. '{title}') is a {type} field. {description}.\") #> `uid` (a.k.a. 'Unique Identifier') is a string field. Consists of 8 random characters from (a-z) and (0-9)."},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field_boolean.html","id":null,"dir":"Reference","previous_headings":"","what":"frictionless field: boolean type — fr_field_boolean","title":"frictionless field: boolean type — fr_field_boolean","text":"frictionless field: boolean type","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field_boolean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"frictionless field: boolean type — fr_field_boolean","text":"","code":"fr_field_boolean(x, name, ..., parse = FALSE)"},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field_boolean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"frictionless field: boolean type — fr_field_boolean","text":"x vector coercable logical vector name required name metadata descriptor string ... <dynamic-dots> optional metadata descriptors (title, description, example) parse parse x .logical instead coercion? requires x character vector","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field_boolean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"frictionless field: boolean type — fr_field_boolean","text":"fr_field vector","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field_boolean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"frictionless field: boolean type — fr_field_boolean","text":"","code":"fr_field_boolean(c(TRUE, FALSE, TRUE), name = \"case\") #> <fr_field[3]> #> case (fr_boolean) #> [1]  TRUE FALSE  TRUE  # use parse = TRUE to use `as.logical()` to parse character strings for booleans fr_field_boolean(c(\"true\", \"False\", \"TRUE\", \" \"), name = \"case\", parse = TRUE) #> <fr_field[4]> #> case (fr_boolean) #> [1]  TRUE FALSE  TRUE    NA  # without parse = TRUE, abbreviations will cause an error"},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field_date.html","id":null,"dir":"Reference","previous_headings":"","what":"frictionless field: date type — fr_field_date","title":"frictionless field: date type — fr_field_date","text":"frictionless field: date type","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"frictionless field: date type — fr_field_date","text":"","code":"fr_field_date(x, name, ..., parse = FALSE, format = \"%Y-%m-%d\")"},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"frictionless field: date type — fr_field_date","text":"x vector coercable Date vector based format (ideally YYYY-MM-DD) name required name metadata descriptor string ... <dynamic-dots> optional metadata descriptors (title, description, example) parse parse x datefixR::fix_date_char instead coercion? requires x character vector assumes month value comes day; e.g., 2/29/2023 format see format argument strptime(); defaults ISO8601","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"frictionless field: date type — fr_field_date","text":"fr_field vector","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"frictionless field: date type — fr_field_date","text":"","code":"# normal usage fr_field_date(c(\"2023-01-01\", \"2023-03-01\", \"2022-11-24\"), name = \"event_date\") #> <fr_field[3]> #> event_date (fr_date) #> [1] 2023-01-01 2023-03-01 2022-11-24  # also takes Dates if already converted fr_field_date(as.Date(c(\"2023-01-01\", \"2023-03-01\", \"2022-11-24\")), name = \"event_date\") #> <fr_field[3]> #> event_date (fr_date) #> [1] 2023-01-01 2023-03-01 2022-11-24  # can specify format for non-ISO8601 dates fr_field_date(c(\"2023/01/01\", \"2023/03/01\", \"2022/11/24\"), name = \"event_date\", format = \"%Y/%m/%d\") #> <fr_field[3]> #> event_date (fr_date) #> [1] 2023-01-01 2023-03-01 2022-11-24  # can parse dates in other formats with optionally installed {datefixR} package fr_field_date(c(\"02/05/23\", \"02/05/21\", \"02/05/18\"), name = \"event_date\", parse = TRUE) #> <fr_field[3]> #> event_date (fr_date) #> [1] 2023-02-05 2021-02-05 2018-02-05  # parsing is useful for year-month combinations too, # as day is always imputed as the first of the month fr_field_date(c(\"jan 2020\", \"feb 2020\", \"mar 2020\"), name = \"event_date\", parse = TRUE) #> <fr_field[3]> #> event_date (fr_date) #> [1] 2020-01-01 2020-02-01 2020-03-01 fr_field_date(c(\"2020-01\", \"2020-02\", \"2020-03\"), name = \"event_date\", parse = TRUE) #> <fr_field[3]> #> event_date (fr_date) #> [1] 2020-01-01 2020-02-01 2020-03-01  # parsing with a missing day and month (i.e., just year) will cause an error; # consider using fr_numeric in this case instead"},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field_number.html","id":null,"dir":"Reference","previous_headings":"","what":"frictionless field: number type — fr_field_number","title":"frictionless field: number type — fr_field_number","text":"frictionless special values: Nan (number), INF (positive infinity), -INF (negative infinity) represented R NaN, Inf, -Inf use readr::locale() change frictionless decimalChar groupChar frictionless bareNumber property false, equivalent parse = TRUE (vice versa)","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field_number.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"frictionless field: number type — fr_field_number","text":"","code":"fr_field_number(x, name, ..., parse = FALSE)"},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field_number.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"frictionless field: number type — fr_field_number","text":"x vector coerceable numeric vector; character vector parse TRUE name required name metadata descriptor string ... <dynamic-dots> optional metadata descriptors (title, description, example) parse parse x readr::parse_number instead coercion? requires x character vector","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field_number.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"frictionless field: number type — fr_field_number","text":"fr_field vector","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field_number.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"frictionless field: number type — fr_field_number","text":"","code":"fr_field_number(1:10, name = \"score\") #> <fr_field[10]> #> score (fr_number) #>  [1]  1  2  3  4  5  6  7  8  9 10  fr_field_number(c(10, 9, -Inf, NA, Inf, NaN), name = \"score\") #> <fr_field[6]> #> score (fr_number) #> [1]   10    9 -Inf   NA  Inf  NaN  # setting parse = TRUE is useful when x contains non-numeric characters: fr_field_number(c(\"$95,000\", \"$100,000\", \"78000\"), name = \"cost\", parse = TRUE) #> <fr_field[3]> #> cost (fr_number) #> [1]  95000 100000  78000  # parsing replaces non-numeric character values with missing values fr_field_number(c(\"12%\", \"44%\", \"xx%\"), name = \"fraction_elevated\", parse = TRUE) #> Warning: 1 parsing failure. #> row col expected actual #>   3  -- a number    xx% #> <fr_field[3]> #> fraction_elevated (fr_number) #> [1] 12 44 NA  # caution: combining numerics and characters into one character vector # is unadvised and can lead to problems c(\"$100\", \"$120\", NaN, Inf) #> [1] \"$100\" \"$120\" \"NaN\"  \"Inf\"  fr_field_number(c(\"$100\", \"$120\", NaN, Inf), name = \"fraction_elevated\", parse = TRUE) #> Warning: 2 parsing failures. #> row col expected actual #>   3  -- a number    NaN #>   4  -- a number    Inf #> <fr_field[4]> #> fraction_elevated (fr_number) #> [1] 100 120  NA  NA"},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field_string.html","id":null,"dir":"Reference","previous_headings":"","what":"frictionless field: string type — fr_field_string","title":"frictionless field: string type — fr_field_string","text":"frictionless field: string type","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"frictionless field: string type — fr_field_string","text":"","code":"fr_field_string(x, name, ...)"},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"frictionless field: string type — fr_field_string","text":"x vector coerceable character vector name required name metadata descriptor string ... <dynamic-dots> optional metadata descriptors (title, description, example)","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field_string.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"frictionless field: string type — fr_field_string","text":"fr_field vector","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field_string.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"frictionless field: string type — fr_field_string","text":"","code":"fr_field_string(letters, name = \"letters\") #> <fr_field[26]> #> letters (fr_string) #>  [1] a b c d e f g h i j k l m n o p q r s t u v w x y z fr_field_string(letters, name = \"letters\", title = \"Letters\") #> <fr_field[26]> #> letters (fr_string) #>  [1] a b c d e f g h i j k l m n o p q r s t u v w x y z # factors are a special type of frictionless string that have an `enum` `constraint` fr_field_string(letters, name = \"letters\", constraints = list(enum = letters)) #> <fr_field[26]> #> letters (fr_string)* #>  [1] a b c d e f g h i j k l m n o p q r s t u v w x y z attributes() #> Error in attributes(): 0 arguments passed to 'attributes' which requires 1"},{"path":"https://cole-brokamp.github.io/fr/reference/tdr.html","id":null,"dir":"Reference","previous_headings":"","what":"tabular-data-resource — tdr","title":"tabular-data-resource — tdr","text":"tabular-data-resource","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/tdr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tabular-data-resource — tdr","text":"","code":"tdr()"},{"path":"https://cole-brokamp.github.io/fr/reference/tdr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"tabular-data-resource — tdr","text":"tibble","code":""}]
