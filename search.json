[{"path":"https://cole-brokamp.github.io/fr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 fr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://cole-brokamp.github.io/fr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Cole Brokamp. Author, maintainer.","code":""},{"path":"https://cole-brokamp.github.io/fr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Brokamp C (2023). fr: Implement Frictionless Standards R. https://github.com/cole-brokamp/fr, https://cole-brokamp.github.io/fr/.","code":"@Manual{,   title = {fr: Implement Frictionless Standards in R},   author = {Cole Brokamp},   year = {2023},   note = {https://github.com/cole-brokamp/fr, https://cole-brokamp.github.io/fr/}, }"},{"path":"https://cole-brokamp.github.io/fr/index.html","id":"fr","dir":"","previous_headings":"","what":"Implement Frictionless Standards in R","title":"Implement Frictionless Standards in R","text":"fr package implementing frictionless table schema standards R","code":""},{"path":"https://cole-brokamp.github.io/fr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Implement Frictionless Standards in R","text":"can install development version codec GitHub :","code":"# install.packages(\"pak\") pak::pak(\"geomarker-io/codec\")"},{"path":"https://cole-brokamp.github.io/fr/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Implement Frictionless Standards in R","text":"Use fr_field() create frictionless field object R automatically selecting appropriate Frictionless type, format, constraint descriptors specific set R objects: Automatically defining metadata descriptors based class() attributes() object R powerful, strict supports R classes. contrast, fr_field_string(), fr_field_number(), fr_field_boolean(), fr_field_date() lenient accept infinitely classes vectors, require fine grained control frictionless type, format, constraints. also come parsing input character strings specific type; e.g., parsing string $11,000 frictionless number (11000).","code":""},{"path":"https://cole-brokamp.github.io/fr/index.html","id":"alternatives","dir":"","previous_headings":"Usage","what":"Alternatives","title":"Implement Frictionless Standards in R","text":"R6 object-oriented alternative package: https://github.com/frictionlessdata/tableschema-r; much simpler approach using {vctrs}","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"fr: Implement Frictionless Standards in R — fr-package","title":"fr: Implement Frictionless Standards in R — fr-package","text":"Classes Frictionless table field schema well tabular-data-resource provided. Tools creating, curating, writing, reading tabular-data-resources also available.","code":""},{"path":[]},{"path":"https://cole-brokamp.github.io/fr/reference/fr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"fr: Implement Frictionless Standards in R — fr-package","text":"Maintainer: Cole Brokamp cole@colebrokamp.com (ORCID)","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field.html","id":null,"dir":"Reference","previous_headings":"","what":"frictionless field — fr_field","title":"frictionless field — fr_field","text":"Automatically create frictionless field descriptor object (fr_field) appropriate frictionless type, format, constraints based class input vector x:","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"frictionless field — fr_field","text":"","code":"fr_field(x, name, ...)"},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"frictionless field — fr_field","text":"x character, factor, numeric, integer, logical, Date vector name required name metadata descriptor string ... <dynamic-dots> optional metadata descriptors (title, description, example)","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"frictionless field — fr_field","text":"fr_field vector","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"frictionless field — fr_field","text":"| R class        | fr type | format | constraints | |:------------------:|:-----------:|:--------------:| | | character, factor^ | string      | | | | numeric, integer   | number      | | | | logical            | boolean     | | | | Date               | date        | | | specific classes automatically coerced. convert class specifically listed frictionless type parse character vectors specific frictionless type, use one fr_field_*() functions instead.","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"frictionless field — fr_field","text":"","code":"fr_field(letters, name = \"example_string\") #> <fr_field[26]> #> example_string (fr_string) #>  [1] a b c d e f g h i j k l m n o p q r s t u v w x y z  # TODO fr_field(factor(LETTERS), name = \"example_factor\")  fr_field(1:26, name = \"example_numbers\") #> <fr_field[26]> #> example_numbers (fr_number) #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #> [26] 26  fr_field(c(TRUE, FALSE, TRUE), name = \"example_logical\") #> <fr_field[3]> #> example_logical (fr_boolean) #> [1]  TRUE FALSE  TRUE  fr_field(as.Date(c(\"2013-08-15\", \"1986-04-29\", \"1986-06-10\")), name = \"example_date\") #> <fr_field[3]> #> example_date (fr_date) #> [1] 2013-08-15 1986-04-29 1986-06-10  # a more realistic field with metadata uid <-   fr_field(     replicate(34, paste0(sample(c(letters,0:9), 8, TRUE), collapse = \"\")),     name = \"uid\",     title = \"Unique Identifier\",     description = \"Consists of 8 random characters from (a-z) and (0-9)\" )  # examine metadata in `fr_field` objects using base R functions:  # the default print method includes the name and frictionless type, # but otherwise prints the same as the underlying R type (here, a character vector): uid #> <fr_field[34]> #> uid (fr_string) #>  [1] 6dwejxq1 d3yatir3 ehi5z3f4 x9htloyo hf961xy1 dsbejrdp 2thuzdbd 06xudf0l #>  [9] bram0cam fkkze74r qrbxdawb 6j3blk26 dvnakg8y ph3aceyy 0jtvnrzm h68llhxs #> [17] gjawhg77 hrn1yqku za275fgs ao6padnt h24d4x03 hkis103w egw1sivh 6bw94kbt #> [25] j6muplrr wo60d5lw uq6d5zzk cr4j3xu5 56fmor9y ge8oukoq 9qtx2byu ct23e99c #> [33] omalnhpo tqenddlh  str(uid) #> uid (fr_string) #>  fr_field [1:34] 6dwejxq1, d3yatir3, ehi5z3f4, x9htloyo, hf961xy1, dsbejrdp... #>  @ name       : chr \"uid\" #>  @ title      : chr \"Unique Identifier\" #>  @ description: chr \"Consists of 8 random characters from (a-z) and (0-9)\" #>  @ type       : chr \"string\"  attributes(uid) #> $name #> [1] \"uid\" #>  #> $title #> [1] \"Unique Identifier\" #>  #> $description #> [1] \"Consists of 8 random characters from (a-z) and (0-9)\" #>  #> $type #> [1] \"string\" #>  #> $class #> [1] \"fr_field\"   \"vctrs_vctr\" #>   # retrieve metadata descriptors with `attr()`: attr(uid, \"title\") #> [1] \"Unique Identifier\"  # using glue_data makes it easy to write clear documentation and messages using metadata fields: glue::glue_data(attributes(uid), \"`{name}` (a.k.a. '{title}') is a {type} field. {description}.\") #> `uid` (a.k.a. 'Unique Identifier') is a string field. Consists of 8 random characters from (a-z) and (0-9)."},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field_boolean.html","id":null,"dir":"Reference","previous_headings":"","what":"frictionless boolean field — fr_field_boolean","title":"frictionless boolean field — fr_field_boolean","text":"frictionless boolean field","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field_boolean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"frictionless boolean field — fr_field_boolean","text":"","code":"fr_field_boolean(x, name, ..., parse = FALSE)"},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field_boolean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"frictionless boolean field — fr_field_boolean","text":"x vector coercable logical vector name required name metadata descriptor string ... <dynamic-dots> optional metadata descriptors (title, description, example) parse parse x .logical instead coercion? requires x character vector","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field_boolean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"frictionless boolean field — fr_field_boolean","text":"fr_field vector","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field_boolean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"frictionless boolean field — fr_field_boolean","text":"","code":"fr_field_boolean(c(TRUE, FALSE, TRUE), name = \"case\") #> <fr_field[3]> #> case (fr_boolean) #> [1]  TRUE FALSE  TRUE  # use parse = TRUE to use `as.logical()` to parse character strings for booleans fr_field_boolean(c(\"true\", \"False\", \"TRUE\", \" \"), name = \"case\", parse = TRUE) #> <fr_field[4]> #> case (fr_boolean) #> [1]  TRUE FALSE  TRUE    NA  # without parse = TRUE, abbreviations will cause an error"},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field_date.html","id":null,"dir":"Reference","previous_headings":"","what":"frictionless date field — fr_field_date","title":"frictionless date field — fr_field_date","text":"frictionless date field","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"frictionless date field — fr_field_date","text":"","code":"fr_field_date(x, name, ..., parse = FALSE, format = \"%Y-%m-%d\")"},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"frictionless date field — fr_field_date","text":"x vector coercable Date vector based format (ideally YYYY-MM-DD) name required name metadata descriptor string ... <dynamic-dots> optional metadata descriptors (title, description, example) parse parse x datefixR::fix_date_char instead coercion? requires x character vector assumes month value comes day; e.g., 2/29/2023 format see format argument strptime(); defaults ISO8601","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"frictionless date field — fr_field_date","text":"fr_field vector","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"frictionless date field — fr_field_date","text":"","code":"# normal usage fr_field_date(c(\"2023-01-01\", \"2023-03-01\", \"2022-11-24\"), name = \"event_date\") #> <fr_field[3]> #> event_date (fr_date) #> [1] 2023-01-01 2023-03-01 2022-11-24  # also takes Dates if already converted fr_field_date(as.Date(c(\"2023-01-01\", \"2023-03-01\", \"2022-11-24\")), name = \"event_date\") #> <fr_field[3]> #> event_date (fr_date) #> [1] 2023-01-01 2023-03-01 2022-11-24  # can specify format for non-ISO8601 dates fr_field_date(c(\"2023/01/01\", \"2023/03/01\", \"2022/11/24\"), name = \"event_date\", format = \"%Y/%m/%d\") #> <fr_field[3]> #> event_date (fr_date) #> [1] 2023-01-01 2023-03-01 2022-11-24  # can parse dates in other formats with optionally installed {datefixR} package fr_field_date(c(\"02/05/23\", \"02/05/21\", \"02/05/18\"), name = \"event_date\", parse = TRUE) #> <fr_field[3]> #> event_date (fr_date) #> [1] 2023-02-05 2021-02-05 2018-02-05  # parsing is useful for year-month combinations too, # as day is always imputed as the first of the month fr_field_date(c(\"jan 2020\", \"feb 2020\", \"mar 2020\"), name = \"event_date\", parse = TRUE) #> <fr_field[3]> #> event_date (fr_date) #> [1] 2020-01-01 2020-02-01 2020-03-01 fr_field_date(c(\"2020-01\", \"2020-02\", \"2020-03\"), name = \"event_date\", parse = TRUE) #> <fr_field[3]> #> event_date (fr_date) #> [1] 2020-01-01 2020-02-01 2020-03-01  # parsing with a missing day and month (i.e., just year) will cause an error; # consider using fr_numeric in this case instead"},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field_number.html","id":null,"dir":"Reference","previous_headings":"","what":"frictionless number field — fr_field_number","title":"frictionless number field — fr_field_number","text":"frictionless special values: Nan (number), INF (positive infinity), -INF (negative infinity) represented R NaN, Inf, -Inf use readr::locale() change frictionless decimalChar groupChar frictionless bareNumber property false, equivalent parse = TRUE (vice versa)","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field_number.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"frictionless number field — fr_field_number","text":"","code":"fr_field_number(x, name, ..., parse = FALSE)"},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field_number.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"frictionless number field — fr_field_number","text":"x vector coerceable numeric vector; character vector parse TRUE name required name metadata descriptor string ... <dynamic-dots> optional metadata descriptors (title, description, example) parse parse x readr::parse_number instead coercion? requires x character vector","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field_number.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"frictionless number field — fr_field_number","text":"fr_field vector","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field_number.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"frictionless number field — fr_field_number","text":"","code":"fr_field_number(1:10, name = \"score\") #> <fr_field[10]> #> score (fr_number) #>  [1]  1  2  3  4  5  6  7  8  9 10  fr_field_number(c(10, 9, -Inf, NA, Inf, NaN), name = \"score\") #> <fr_field[6]> #> score (fr_number) #> [1]   10    9 -Inf   NA  Inf  NaN  # setting parse = TRUE is useful when x contains non-numeric characters: fr_field_number(c(\"$95,000\", \"$100,000\", \"78000\"), name = \"cost\", parse = TRUE) #> <fr_field[3]> #> cost (fr_number) #> [1]  95000 100000  78000  # parsing replaces non-numeric character values with missing values fr_field_number(c(\"12%\", \"44%\", \"xx%\"), name = \"fraction_elevated\", parse = TRUE) #> Warning: 1 parsing failure. #> row col expected actual #>   3  -- a number    xx% #> <fr_field[3]> #> fraction_elevated (fr_number) #> [1] 12 44 NA  # caution: combining numerics and characters into one character vector # is unadvised and can lead to problems c(\"$100\", \"$120\", NaN, Inf) #> [1] \"$100\" \"$120\" \"NaN\"  \"Inf\"  fr_field_number(c(\"$100\", \"$120\", NaN, Inf), name = \"fraction_elevated\", parse = TRUE) #> Warning: 2 parsing failures. #> row col expected actual #>   3  -- a number    NaN #>   4  -- a number    Inf #> <fr_field[4]> #> fraction_elevated (fr_number) #> [1] 100 120  NA  NA"},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field_string.html","id":null,"dir":"Reference","previous_headings":"","what":"frictionless string field — fr_field_string","title":"frictionless string field — fr_field_string","text":"frictionless string field","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"frictionless string field — fr_field_string","text":"","code":"fr_field_string(x, name, ...)"},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"frictionless string field — fr_field_string","text":"x vector coerceable character vector name required name metadata descriptor string ... <dynamic-dots> optional metadata descriptors (title, description, example)","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field_string.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"frictionless string field — fr_field_string","text":"fr_field vector","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/fr_field_string.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"frictionless string field — fr_field_string","text":"","code":"fr_field_string(letters, name = \"letters\") #> <fr_field[26]> #> letters (fr_string) #>  [1] a b c d e f g h i j k l m n o p q r s t u v w x y z fr_field_string(letters, name = \"letters\", title = \"Letters\") #> <fr_field[26]> #> letters (fr_string) #>  [1] a b c d e f g h i j k l m n o p q r s t u v w x y z"},{"path":"https://cole-brokamp.github.io/fr/reference/tdr.html","id":null,"dir":"Reference","previous_headings":"","what":"tabular-data-resource — tdr","title":"tabular-data-resource — tdr","text":"tabular-data-resource","code":""},{"path":"https://cole-brokamp.github.io/fr/reference/tdr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tabular-data-resource — tdr","text":"","code":"tdr()"},{"path":"https://cole-brokamp.github.io/fr/reference/tdr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"tabular-data-resource — tdr","text":"tibble","code":""}]
